	Practica 3

1.Configuar una maquina e instalarle el nginx como balanceador de carga.

Siguiendo los pasos de nuestro guión obtenemos facilmente la instalación y la configuración
de nuestro balanceador nginx.

"sudo apt-get install nginx"

modificamos el archivo /etc/nginx/conf.d/default.conf , comentamos una linea en la configuración
de nginx.

"sudo systemctl start nginx" //para arrancar el balanceador

*****Para el algoritmo de ponderación , suponiendo que la primera tiene el doble de carga que la segunda*****

			upstream apaches {
				server 172.16.168.130 weigth=2;
				server 172.16.168.131 weigth=1;
			}
			server{
				listen 80;
				server_name balanceador;
				access_log /var/log/nginx/balanceador.access.log;
				error_log /var/log/nginx/balanceador.error.log;
				root /var/www/;
				location /
				{
					proxy_pass http://apaches;
					proxy_set_header Host $host;
					proxy_set_header X-Real-IP $remote_addr;
					proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
					proxy_http_version 1.1;
					proxy_set_header Connection "";
				}
			}
**************************************************************************************************************
******Para el algoritmo de Round Robin, es suficiente con quitarle el peso a las maquinas*********************
			upstream apaches {
				server 172.16.168.130;
				server 172.16.168.131;
			}
			server{
				listen 80;
				server_name balanceador;
				access_log /var/log/nginx/balanceador.access.log;
				error_log /var/log/nginx/balanceador.error.log;
				root /var/www/;
				location /
				{
					proxy_pass http://apaches;
					proxy_set_header Host $host;
					proxy_set_header X-Real-IP $remote_addr;
					proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
					proxy_http_version 1.1;
					proxy_set_header Connection "";
				}
			}
**************************************************************************************************************

2.Configurar una maquina e instalarle el haproxy como balanceador de carga.

Tal como expresa el guión seguimos los pasos de instalación de haproxy,

"sudo apt-get install haproxy"

Lo configuramos en /etc/haproxy/haproxy.cfg

	global
		daemon
		maxconn 256defaults
	default
		mode http  
		contimeout 4000
		clitimeout 42000
		srvtimeout 43000

	frontend http-in
		bind *:80
		default_backend servers

	backend servers
	server m1 172.16.58.128:80 maxconn 32
	server m2 172.16.58.129:80 maxconn 32

****NOTA: HABIENDO APAGADO EL BALANCEADOR NGINX*****
Iniciamos nuestro balanceador haproxy

"sudo /usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg

*******ALGORITMO PONDERACION+CONFIGURACION HAPROXY*********
global
	daemon
	maxconn 256
defaults
	mode http
	contimeout 4000
	clitimeout 42000
	srvtimeout 43000

frontend http-in
	bind *:80
	default_backend servers

backend servers
	server m1 172.16.168.130:80 weigth 2
	server m2 172.16.168.131:80 weigth 1



***********************************************************
*******ALGORITMO ROUNDROBIN+CONFIGURACION HAPROXY**********
global
	daemon
	maxconn 256
defaults
	mode http
	contimeout 4000
	clitimeout 42000
	srvtimeout 43000

frontend http-in
	bind *:80
	default_backend servers

backend servers
	server m1 172.16.168.130:80 maxconn 32
	server m2 172.16.168.131:80 maxconn 32


***********************************************************

3.Someter a la granja web a una alta carga, teniendo primero nginx y despues haproxy

	1-Empezaremos sometiendo a nginx
		
		ROUND ROBIN: ab -n 1000 -c 10 http://192.168.2.121/index.html

			This is ApacheBench, Version 2.3 <$Revision: 1706008 $>
			Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
			Licensed to The Apache Software Foundation, http://www.apache.org/

			Benchmarking 172.16.58.130 (be patient)


			Server Software:        nginx/1.10.0
			Server Hostname:        172.16.58.130
			Server Port:            80

			Document Path:          /index.html
			Document Length:        56 bytes

			Concurrency Level:      10
			Time taken for tests:   0.472 seconds
			Complete requests:      1000
			Failed requests:        0
			Total transferred:      301000 bytes
			HTML transferred:       56000 bytes
			Requests per second:    2120.57 [#/sec] (mean)
			Time per request:       4.716 [ms] (mean)
			Time per request:       0.472 [ms] (mean, across all concurrent requests)
			Transfer rate:          623.33 [Kbytes/sec] received

			Connection Times (ms)
				      min  mean[+/-sd] median   max
			Connect:        0    0   0.4      0       4
			Processing:     1    4   2.5      4      25
			Waiting:        1    4   2.5      4      24
			Total:          1    5   2.6      4      26

			Percentage of the requests served within a certain time (ms)
			  50%      4
			  66%      4
			  75%      5
			  80%      5
			  90%      7
			  95%      8
			  98%     14
			  99%     19
			 100%     26 (longest request)

		PONDERACION: ab -n 1000 -c 10 http://192.168.2.121/index.html

			This is ApacheBench, Version 2.3 <$Revision: 1706008 $>
			Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
			Licensed to The Apache Software Foundation, http://www.apache.org/

			Benchmarking 172.16.58.130 (be patient)


			Server Software:        nginx/1.10.0
			Server Hostname:        172.16.58.130
			Server Port:            80

			Document Path:          /index.html
			Document Length:        56 bytes

			Concurrency Level:      10
			Time taken for tests:   0.484 seconds
			Complete requests:      1000
			Failed requests:        0
			Total transferred:      301000 bytes
			HTML transferred:       56000 bytes
			Requests per second:    2065.40 [#/sec] (mean)
			Time per request:       4.842 [ms] (mean)
			Time per request:       0.484 [ms] (mean, across all concurrent requests)
			Transfer rate:          607.12 [Kbytes/sec] received

			Connection Times (ms)
				      min  mean[+/-sd] median   max
			Connect:        0    0   0.3      0       3
			Processing:     1    5   2.4      4      21
			Waiting:        1    5   2.4      4      21
			Total:          2    5   2.5      4      24

			Percentage of the requests served within a certain time (ms)
			  50%      4
			  66%      5
			  75%      5
			  80%      5
			  90%      7
			  95%      8
			  98%     15
			  99%     19
			 100%     24 (longest request)

	2-Empezaremos sometiendo a haproxy

		ROUND ROBIN: ab -n 1000 -c 10 http://192.168.2.121/index.html

			This is ApacheBench, Version 2.3 <$Revision: 1706008 $>
			Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
			Licensed to The Apache Software Foundation, http://www.apache.org/
			Benchmarking 172.16.58.130 (be patient)


			Server Software:        Apache/2.4.18
			Server Hostname:        172.16.58.130
			Server Port:            80

			Document Path:          /index.html
			Document Length:        56 bytes

			Concurrency Level:      10
			Time taken for tests:   0.374 seconds
			Complete requests:      1000
			Failed requests:        0
			Total transferred:      302000 bytes
			HTML transferred:       56000 bytes
			Requests per second:    2673.10 [#/sec] (mean)
			Time per request:       3.741 [ms] (mean)
			Time per request:       0.374 [ms] (mean, across all concurrent requests)
			Transfer rate:          788.35 [Kbytes/sec] received

			Connection Times (ms)
				      min  mean[+/-sd] median   max
			Connect:        0    0   0.2      0       2
			Processing:     1    4   3.1      3      29
			Waiting:        1    4   3.1      3      29
			Total:          1    4   3.2      3      30

			Percentage of the requests served within a certain time (ms)
			  50%      3
			  66%      4
			  75%      5
			  80%      5
			  90%      7
			  95%      9
			  98%     13
			  99%     17
			 100%     30 (longest request)

		PONDERACION: ab -n 1000 -c 10 http://192.168.2.121/index.html

			This is ApacheBench, Version 2.3 <$Revision: 1706008 $>
			Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
			Licensed to The Apache Software Foundation, http://www.apache.org/

			Benchmarking 172.16.58.130 (be patient)


			Server Software:        Apache/2.4.18
			Server Hostname:        172.16.58.130
			Server Port:            80

			Document Path:          /index.html
			Document Length:        56 bytes

			Concurrency Level:      10
			Time taken for tests:   0.385 seconds
			Complete requests:      1000
			Failed requests:        0
			Total transferred:      302000 bytes
			HTML transferred:       56000 bytes
			Requests per second:    2599.06 [#/sec] (mean)
			Time per request:       3.848 [ms] (mean)
			Time per request:       0.385 [ms] (mean, across all concurrent requests)
			Transfer rate:          766.52 [Kbytes/sec] received

			Connection Times (ms)
				      min  mean[+/-sd] median   max
			Connect:        0    0   0.5      0      11
			Processing:     1    4   3.4      3      33
			Waiting:        1    4   3.4      3      33
			Total:          1    4   3.6      3      34

			Percentage of the requests served within a certain time (ms)
			  50%      3
			  66%      4
			  75%      5
			  80%      5
			  90%      7
			  95%      9
			  98%     15
			  99%     20
			 100%     34 (longest request)

		COMO RESULTADO OBTENEMOS:
			-ROUND ROBIN NGINX: Time taken for tests:   0.472 seconds
			-PONDERACION NGINX: Time taken for tests:   0.484 seconds
			-ROUND ROBIN HAPROXY: Time taken for tests:   0.374 seconds
			-PONDERACION HAPROXY: Time taken for tests:   0.385 seconds
		
		Como conclusión podemos observar que el balanceador haproxy nos funciona mejor en ambas situaciones y en especial con el algoritmo de Round Robin.
		
	





